<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>js防抖与节流</title>
      <link href="/2019/01/15/js-fang-dou-yu-jie-liu/"/>
      <url>/2019/01/15/js-fang-dou-yu-jie-liu/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在一个项目中，用户进行一些频繁的操作，如</p><ul><li>用户输入账号密码，我们前端校验或向后台请求校验的时候</li><li>用户频繁的调整浏览器窗口大小</li><li>用户快速滚动滚动条</li><li>用户鼠标频繁的移入移出点击等等</li></ul><p>这些频繁执行 DOM 操作、资源加载等重行为，可能会导致 UI 停顿甚至浏览器崩溃。我们要去控制这些行为，防止不良的用户体验出现，就要用到我们的防抖和节流了</p><p>我们来看个用户输入的例子<br>写一个 <code>index.html</code> 文件</p><pre class=" language-javascript"><code class="language-javascript"><span class="token operator">&lt;</span><span class="token operator">!</span>DOCTYPE HTML<span class="token operator">></span><span class="token operator">&lt;</span>html lang<span class="token operator">=</span><span class="token string">"zh-CN"</span><span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>meta charset<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> id<span class="token operator">=</span><span class="token string">"search"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>script src<span class="token operator">=</span><span class="token string">"debounce.js"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p><code>debounce.js</code> 文件如下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> input <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'search'</span><span class="token punctuation">)</span><span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">verify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>看看效果：<br><img src="/../images/debounce.gif" alt=""><br>输入了这些字符，短短的时间内执行了这么多次，如果是 <code>ajax</code> 请求将会向后台请求好多次，会加重后台压力，并且加载是有时间的，如果代码复杂些，会造成不可预知的 <code>bug</code>。</p><p>要解决这些问题，有两种方式 debounce 防抖和 throttle 节流，我们先来看看防抖</p><h2 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h2><p>防抖简单来说就是当调用函数 n 秒后，才会执行该函数，若在这 n 秒内又调用该函数则将重新计算执行时间。</p><p>来个简单实现</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在原来的基础上这么调用：</p><pre class=" language-javascript"><code class="language-javascript">input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>verify<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>来看看效果<br><img src="/../images/debounce1.gif" alt=""></p><p>我们可以看到触发 <code>verify</code> 函数的频率降低了，随你怎么输入，等你输入停止后 1000ms 才执行事件，但是如果我们这里有个问题，<code>this</code> 和 <code>event</code> 获取不到了，这里就不写例子验证，有疑问的同学自己撸遍代码，我们来优化下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//获取this指向</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments <span class="token comment" spellcheck="true">//获取参数</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//改写verify</span><span class="token keyword">function</span> <span class="token function">verify</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p><img src="/../images/debounce2.gif" alt=""></p><p>代码到这差不多完善了，但是我不想事件停止触发后才执行，我希望我输入第一个字符直接触发，期间怎么输入都不触发事件，直到停止触发n秒后，才可以重新触发执行。那我们来实现一下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span> wait<span class="token punctuation">,</span>immediate <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//加个参数进行控制是否立即执行,初始值为false</span>    <span class="token keyword">var</span> t<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">//获取this指向</span>        <span class="token keyword">var</span> args <span class="token operator">=</span> arguments <span class="token comment" spellcheck="true">//获取参数</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>immediate<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>t             t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>callNow<span class="token punctuation">)</span><span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//调用方式</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token function">debounce</span><span class="token punctuation">(</span>verify<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>同样的来看效果<br><img src="/../images/debounce3.gif" alt=""><br>我们可以看到输入之后立即执行，停止输入等待时间大于1000后，再次输入又立即执行。</p><p>关于防抖我们在考虑一个小需求，当输入时间间隔是 5000ms，<code>immediate</code> 为 <code>true</code> 的时候，我只能等到 5000ms 后才能重新触发事件，现在我希望有一个按钮，点击之后，又可以重新输入并立即执行，为此，我们优化一下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">debounce</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>immediate<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> t    <span class="token keyword">var</span> debounce <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments        <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>immediate<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> callNow <span class="token operator">=</span> <span class="token operator">!</span>t            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>callNow<span class="token punctuation">)</span> fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    debounce<span class="token punctuation">.</span>cancel <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        t <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> debounce<span class="token punctuation">}</span></code></pre><p>如何调用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token function">debounce</span><span class="token punctuation">(</span>verify<span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span>input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> fn<span class="token punctuation">)</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'button'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span>fn<span class="token punctuation">.</span>cancel<span class="token punctuation">)</span></code></pre><p>效果如下<br><img src="/../images/debounce4.gif" alt=""><br>至此，防抖就基本实现了</p><h2 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h2><p>节流简单的来说就是对于连续的函数调用，每间隔一段时间，只让其执行一次。<br>初步实现方式有两种，一种是使用时间戳，一种是设置定时器。</p><h3 id="使用时间戳"><a href="#使用时间戳" class="headerlink" title="使用时间戳"></a>使用时间戳</h3><p>设置一个对比时间戳，当触发事件时，使用当前时间戳减去对比时间戳，如果差值大于设定的间隔时间，则执行函数，并用当前时间戳替换对比时间戳；如果差值小于设定的间隔时间，则不执行函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments        <span class="token keyword">if</span><span class="token punctuation">(</span>now <span class="token operator">-</span> previous <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span>            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            previous <span class="token operator">=</span> now        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>调用方式</p><pre class=" language-javascript"><code class="language-javascript">input<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'keyup'</span><span class="token punctuation">,</span> <span class="token function">throttle</span><span class="token punctuation">(</span>verify<span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>效果展示<br><img src="/../images/throttle.gif" alt=""></p><p>当我们对输入框快速的输入，事件会立即执行，然后每过一秒执行一次，假如我们在11：19：16之后输入未到17秒之前停止，将不会再执行事件，这就是所谓的有头无尾</p><h3 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h3><p>当首次触发事件时，设置定时器，<code>wait</code> 毫秒后执行函数并将定时器置为 <code>null</code>，之后触发事件时，如果定时器存在则不执行，如果定时器不存在则再次设置定时器。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">,</span>        previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>wait<span class="token punctuation">)</span>        <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果展示<br><img src="/../images/throttle1.gif" alt=""></p><p>当我们对输入框快速的输入，事件不会立即执行，输入 1000ms 后才初次执行，然后每 1000ms 执行一次，当在11：29：17之后未到18秒之前停止输入的的时候，最后仍然会执行一次，这就是所谓的有无头有尾</p><p>那我们想要个有头有尾的，那就结合两者的优势，双剑合璧</p><h3 id="结合版"><a href="#结合版" class="headerlink" title="结合版"></a>结合版</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">,</span>        previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>            remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//距离下次函数执行的剩余时间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// 如果无剩余时间或系统时间被修改</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span>            previous <span class="token operator">=</span> now            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                previous <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>效果展示<br><img src="/../images/throttle2.gif" alt=""><br>我们来看下代码是如何执行的</p><ul><li>首次打印：<code>remaining</code> 为负数，立即执行函数并更新 <code>previous</code>。</li><li>第二次打印：<code>remaining</code> 为正数，<code>!t</code> 为 <code>true</code> 设置定时器，<code>remaining</code> 秒后执行函数并更新 <code>previous</code>，将定时器设为 null</li><li>之后的打印：<ul><li>若定时器内函数执行，<code>remaining</code> 为正数，则继续设置定时器，<code>remaining</code> 秒后执行函数</li><li>若定时器内函数未执行，但 <code>remaining</code> 小于等于0，清除定时器并置为 <code>null</code>，立即执行函数，更新时间戳，下一次触发继续设定定时器</li></ul></li></ul><p>有头有尾实现成功，但是有时候想要上面两种情况，难道我要写三个函数，太多余了，再优化下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">,</span>        previous <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>            now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>previous <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> previous <span class="token operator">=</span> now        <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> previous<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//距离下次函数执行的剩余时间</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span>            previous <span class="token operator">=</span> now            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 解除引用，防止内存泄漏</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> self <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                previous <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// 解除引用，防止内存泄漏</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>t<span class="token punctuation">)</span> self <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> remaining<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注意这样的实现方式有个问题，<code>leading：false</code> 和 <code>trailing: false</code> 不能同时设置，因为 <code>trailing</code> 设置为 <code>false</code>，停止触发的时候不会设置定时器，所以只要再过了设置的时间，再输入的话，就会立刻执行，就违反了 <code>leading: false</code>。这种无头无尾的需求挺小众的，暂时不深入讨论</p><p>同样的，我们也给 throttle 添加 cancel 方法</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">throttle</span><span class="token punctuation">(</span>fn<span class="token punctuation">,</span>wait<span class="token punctuation">,</span>options<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> t<span class="token punctuation">,</span>        pervious <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>options<span class="token punctuation">)</span> options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> throttle <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">,</span>            args <span class="token operator">=</span> arguments<span class="token punctuation">,</span>            now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>pervious <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> pervious <span class="token operator">=</span> now        <span class="token keyword">var</span> remaining <span class="token operator">=</span> wait <span class="token operator">-</span> <span class="token punctuation">(</span>now <span class="token operator">-</span> pervious<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>remaining <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span> remaining <span class="token operator">></span> wait<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span>            pervious <span class="token operator">=</span> now            fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> self <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>t <span class="token operator">&amp;&amp;</span> options<span class="token punctuation">.</span>trailing <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            t <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                pervious <span class="token operator">=</span> options<span class="token punctuation">.</span>leading <span class="token operator">===</span> <span class="token boolean">false</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                t <span class="token operator">=</span> <span class="token keyword">null</span>                fn<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>args<span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span> self <span class="token operator">=</span> args <span class="token operator">=</span> <span class="token keyword">null</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> wait<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    throttle<span class="token punctuation">.</span>cancel <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token function">clearTimeout</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span>        pervious <span class="token operator">=</span> <span class="token number">0</span>        t <span class="token operator">=</span> <span class="token keyword">null</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> throttle<span class="token punctuation">}</span></code></pre><p>到这里，我们基本就实现了防抖。</p><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js创建对象</title>
      <link href="/2019/01/08/js-chuang-jian-dui-xiang/"/>
      <url>/2019/01/08/js-chuang-jian-dui-xiang/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>程序员找不到对象怎么办，哼，我们会自己 new 一个对象出来。扎心了。不过我们创建的对象有好也有坏，本文我们来捋一捋。</p><h2 id="字面量方式"><a href="#字面量方式" class="headerlink" title="字面量方式"></a>字面量方式</h2><p>我想要个女朋友，那创建一个呗</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Amy'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'Wendy'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span></code></pre><p>简单直接，但是要广撒网，创建多个对象，那不是很麻烦，复制粘贴，那不是成本很高，重复代码太多了，那优化一下</p><h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h2><p>要知道我们是生成对象，所以我们来做个加工厂。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createGirl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age  o<span class="token punctuation">.</span>height <span class="token operator">=</span> height  o<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token function">createGirl</span><span class="token punctuation">(</span><span class="token string">'Amy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">)</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token function">createGirl</span><span class="token punctuation">(</span><span class="token string">'Wendy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">)</span><span class="token keyword">var</span> Anna <span class="token operator">=</span> <span class="token function">createGirl</span><span class="token punctuation">(</span><span class="token string">'Anna'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">175</span><span class="token punctuation">)</span></code></pre><p>直观看到重复代码减少了，但是她们都是 <code>Object</code> 类型,这不太好吧，不行，换一种方式</p><h2 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height  <span class="token keyword">this</span><span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Amy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">)</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Wendy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">)</span><span class="token keyword">var</span> Anna <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Anna'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">175</span><span class="token punctuation">)</span></code></pre><p>这样她们就有类型的概念了，但是每创建一个实例，每个方法都要被创建一次，也是就说我本想对每个对象说我有一套房子，没想到创建她们要三套房子。成本太高了</p><pre class=" language-javascript"><code class="language-javascript">Amy<span class="token punctuation">.</span>getAge <span class="token operator">===</span> Wendy<span class="token punctuation">.</span>getAge <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>CreateGirl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>CreateGirl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Amy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18</span>Wendy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span>CreateGirl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>Amy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//19</span>Wendy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 19</span></code></pre><p>方法虽然不会重新创建，但是所有的属性和方法都共享了，还不能初始化参数，这两对象不就一模一样了么。这样代码写的很繁琐，我们可以精简一些</p><h3 id="原型字面量对象"><a href="#原型字面量对象" class="headerlink" title="原型字面量对象"></a>原型字面量对象</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>CreateGirl<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> CreateGirl<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//通过constructor属性找到所属构造函数</span>  age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>  getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>就是原型模式的字面量写法，该怎样还是怎样。那我们把构造函数和原型模式结合起来是不就能取长补短了</p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//构造函数</span><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//原型</span>CreateGirl<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor<span class="token punctuation">:</span> CreateGirl<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//通过constructor属性找到所属构造函数</span>  getAge<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Amy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">)</span><span class="token keyword">var</span> Wendy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Wendy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">165</span><span class="token punctuation">)</span><span class="token keyword">var</span> Anna <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Anna'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">175</span><span class="token punctuation">)</span></code></pre><p>环肥燕瘦，该私有的私有，该共享的共享，但是如果想要更好的封装性呢</p><h2 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>getAge <span class="token operator">!=</span> <span class="token string">"function"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    CreateGirl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Amy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">)</span></code></pre><p>确实好看不少，但是要注意一点不要在函数内部使用原型字面量方式重写原型，因为这种写法是先创建的实例，然后在修改的原型，要是用原型字面量重写原型，会切断现有实例和新原型之间的联系，导致方法实例上无此方法</p><h2 id="寄生构造函数"><a href="#寄生构造函数" class="headerlink" title="寄生构造函数"></a>寄生构造函数</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">CreateGirl</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  o<span class="token punctuation">.</span>name <span class="token operator">=</span> name  o<span class="token punctuation">.</span>age <span class="token operator">=</span> age  o<span class="token punctuation">.</span>height <span class="token operator">=</span> height  o<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> o<span class="token punctuation">}</span>CreateGirl<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CreateGirl</span><span class="token punctuation">(</span><span class="token string">'Amy'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">155</span><span class="token punctuation">)</span>Amy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span>Amy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Uncaught TypeError: Amy.getName is not a function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Amy <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Amy <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true</span></code></pre><p>和工厂模式类似，只是用了new 初始化实例，同样都无法指向构造函数，所以和构造函数的原型没有任何关系</p><h2 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">createGirl</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  o<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> o<span class="token punctuation">}</span><span class="token keyword">var</span> Amy <span class="token operator">=</span> <span class="token function">createGirl</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span>Amy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span>Amy<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>Amy<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Amy<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 20</span></code></pre><p>也就是说，没有公共属性，并且其方法中不引用this的对象，也无法指向构造函数</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>各有优劣结合实际业务情况选择创建对象方式，关于 es6 的 <code>class</code> 涉及方面较多，慢慢理清楚再开篇</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>解读this,call,apply,bind</title>
      <link href="/2019/01/03/jie-du-this-call-apply-bind/"/>
      <url>/2019/01/03/jie-du-this-call-apply-bind/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的<a href="http://www.darkbo.com/2018/12/28/zhi-xing-shang-xia-wen/">执行上下文</a>中，我们知道了每个函数都有一个执行上下文，对于每个执行上下文都有三个重要属性：</p><ul><li>作用域链</li><li>变量对象</li><li><code>this</code> 指向</li></ul><p>今天我们来弄清楚 <code>this</code> 指向的是什么，还有 <code>call</code> 、 <code>apply</code> 、 <code>bind</code> 是怎么回事</p><h2 id="this-指向"><a href="#this-指向" class="headerlink" title="this 指向"></a>this 指向</h2><p>函数调用，创建了执行上下文，确认了 <code>this</code> 指向,所以 <code>this</code> 的指向完全取决于函数在哪里被调用。</p><p>首先我们看看代码观察一下 <code>this</code> 的指向</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'a'</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span> foo<span class="token punctuation">,</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'aaa'</span><span class="token keyword">var</span> b <span class="token operator">=</span> o<span class="token punctuation">.</span>fn<span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'a'</span></code></pre><p>我们可以看到不同的调用方式 <code>this.a</code> 的结果也不同，那么它是以什么规则来确定 <code>this</code> 指向的呢</p><h3 id="作为一个函数调用"><a href="#作为一个函数调用" class="headerlink" title="作为一个函数调用"></a>作为一个函数调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// "use strict"</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'a'</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aa'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'a'</span></code></pre><p><code>foo()</code> 在全局执行上下文中被调用，这个时候 this 默认指向 全局对象 window，但是在严格模式，会打印 <code>undefined</code>。其实这段代码还可以这样看，调用 <code>foo()</code> 就是调用 <code>window.foo()</code>,根据前面所说 <code>this</code> 的指向完全取决于函数在哪里被调用。<code>foo()</code> 作为 <code>window</code> 这个对象的方法调用，所以 <code>this</code> 指向 <code>window</code>，那么我们就可以知道下一条规则</p><h3 id="函数作为对象方法调用"><a href="#函数作为对象方法调用" class="headerlink" title="函数作为对象方法调用"></a>函数作为对象方法调用</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aa'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span>foo<span class="token punctuation">}</span>A<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//'a'</span><span class="token comment" spellcheck="true">// A{}</span></code></pre><p>按照上述规则来看， <code>this</code> 指向 <code>A</code> 这个对象 <code>，foo</code> 中的 <code>this.a</code> 就会打印出 <code>A.a</code> 的值，那我们在写个稍微复杂的例子，加以论证</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aa'</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span>foo<span class="token punctuation">,</span>    b<span class="token punctuation">:</span><span class="token punctuation">{</span>        fn<span class="token punctuation">:</span>foo<span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>A<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// undefined</span><span class="token comment" spellcheck="true">// A.b{}</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'b'</span>A<span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 'b'</span><span class="token comment" spellcheck="true">// A.b{}</span></code></pre><p><code>this</code> 的指向很明朗，指向 <code>A.b</code>。它不会向父级查找属性，只会向原型链查找属性 如果对原型有问题的可以去看看<a href="http://www.darkbo.com/2018/12/21/yuan-xing-prototype/">原型 Prototype</a>这篇文章加深下理解。我们还可以在进阶一下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaaa'</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aa'</span>    <span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">,</span>        fn<span class="token punctuation">:</span>fn<span class="token punctuation">,</span>        b<span class="token punctuation">:</span><span class="token punctuation">{</span>            fn<span class="token punctuation">:</span>fn<span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>a    <span class="token punctuation">}</span>    <span class="token keyword">return</span> A<span class="token punctuation">}</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'a'</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fn<span class="token function">o</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'aaaa'</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>b<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>c<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'aaaa'</span></code></pre><p>分析一波：以下所述的都是非严格模式下的<br><code>foo()</code> 返回一个 <code>A</code> 对象，<code>foo().fn()</code> 相当于 <code>A.fn()</code> 所以 <code>this</code> 指向 <code>A</code>。<br><code>o</code> 只是引用 <code>A.fn</code> 的地址，这里主要看o在哪执行，我们看到 o 在全局上下文中执行 所以 <code>this</code> 指向 <code>window</code>。<br>同样的  <code>A.b.fn()</code> 跟上面的例子一样  指向 <code>A.b</code>，那么就返回 <code>undefined</code>.<br>最后只是访问 <code>A.c</code> 的属性值，并不是函数调用，使用 <code>{}</code> 是不会形成新的作用域，所以为 <code>c</code> 赋值时的 <code>this.a</code> 中的 <code>this</code> 指向是全局对象。</p><h3 id="构造函数-this-指向-（new）"><a href="#构造函数-this-指向-（new）" class="headerlink" title="构造函数 this 指向 （new）"></a>构造函数 this 指向 （new）</h3><p>在构造函数中的 <code>this</code> 指向当前类的一个实例</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> height <span class="token operator">=</span> <span class="token number">180</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>getHeight <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>o<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'darkbo18'</span>o<span class="token punctuation">.</span><span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span></code></pre><p>用 <code>new</code> 创建的实例 <code>o</code>，我们可以粗略的看成这种情况</p><pre class=" language-javascript"><code class="language-javascript">o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'darkbo'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>    fn<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getHeight<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这样就很明显的看出 <code>this</code> 的指向,所以就能得出上述例子的结果。其实调用构造函数的过程是这样</p><ul><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 <code>this</code> 就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ul><p>那么 <code>this</code> 是如何指向这个新对象的呢？那我们先来理解下 <code>call</code>、 <code>apply</code>、 <code>bind</code>。</p><h2 id="call"><a href="#call" class="headerlink" title="call"></a>call</h2><p><code>call</code> 是每个函数都有的一个方法，它允许你在调用函数时为函数指定上下文。也就是使用一个指定的 <code>this</code> 值和对应的参数前提下调用某个函数或方法</p><p>举个栗子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> age <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//darkbo18180</span></code></pre><p>其实 <code>call</code> 只是将 <code>o</code> 改造成这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>    foo<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> age <span class="token operator">+</span> height<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span></code></pre><p>当然上述代码只是一个模拟等同的过程，不要试图去访问 <code>o</code> 的属性, <code>o</code> 还是 <code>{name:&#39;darkbo&#39;}</code>,那我们可以去模拟一下 <code>call</code> 的实现。<br>首先我们要知道 call 都做了哪些工作：</p><ul><li>将函数 foo 作为 o 的一个属性</li><li>执行 o.foo(参数)</li><li>不改变原来的 o，那么只要再删除 o.foo</li></ul><p>开始实现：</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 通过上述this规则，this可以获取调用newCall的函数</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arguments['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将参数保存在args数组中</span>    <span class="token punctuation">}</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn('</span> <span class="token operator">+</span> args <span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在eval中，args 自动调用 args.toString()方法</span>    <span class="token comment" spellcheck="true">//context.fn(arguments[1], arguments[2], ...);</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//测试一下</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> age <span class="token operator">+</span> height<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">newCall</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//darkbo18180</span></code></pre><p>感觉像是完成了，别着急，我们还差点东西，看这个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>height<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> age <span class="token operator">+</span> height<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span>        age<span class="token punctuation">:</span>age<span class="token punctuation">,</span>        height<span class="token punctuation">:</span>height    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'fengzibo'</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">}</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//fengzibo undefined undefined</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//darkbo18180</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">180</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     name:'darkbo',</span><span class="token comment" spellcheck="true">//     age:18,</span><span class="token comment" spellcheck="true">//     height:180</span><span class="token comment" spellcheck="true">// }</span></code></pre><p>当传入 <code>this</code> 的参数为 <code>null</code> 时，<code>this</code> 指向为 <code>window</code>。并且函数可以有返回值。那么我们再来完善下</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">{</span>    context <span class="token operator">=</span> context <span class="token operator">||</span> window <span class="token comment" spellcheck="true">//解决传null问题</span>    context<span class="token punctuation">.</span>fn <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 通过上述this规则，this可以获取调用newCall的函数</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        args<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'arguments['</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">']'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//将参数保存在args数组中</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> res <span class="token operator">=</span> <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'context.fn('</span> <span class="token operator">+</span> args <span class="token operator">+</span><span class="token string">')'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//在eval中，args 自动调用 args.toString()方法</span>    <span class="token comment" spellcheck="true">//context.fn(arguments[1], arguments[2], ...);</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><p>基本功能都已实现，可是还有点隐患，如果对象本身就有 fn 这个方法的时候，就会出现问题<br>我们还可以在进阶一版，我们可以用es6编写：</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newCall <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> context <span class="token operator">||</span> window <span class="token comment" spellcheck="true">//解决传null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传其他类型生成一个空对象</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//独一无二</span>    context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 通过上述this规则，this可以获取调用newCall的函数</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><p>基本实现完毕，<code>apply</code> 也是同样的套路</p><h2 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h2><p>call 和 apply 一样，只是 <code>call</code> 是传多个参数， <code>apply</code> 是传入一个数组</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newApply <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> context <span class="token operator">===</span> <span class="token string">'object'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> context <span class="token operator">||</span> window <span class="token comment" spellcheck="true">//解决传null</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        context <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//传其他类型生成一个空对象</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> fn <span class="token operator">=</span> <span class="token function">Symbol</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//独一无二</span>    context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span> <span class="token comment" spellcheck="true">// 通过上述this规则，this可以获取调用newCall的函数</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> context<span class="token punctuation">[</span>fn<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span>    <span class="token keyword">delete</span> context<span class="token punctuation">.</span>fn    <span class="token keyword">return</span> res<span class="token punctuation">}</span></code></pre><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p><code>bind()</code> 方法会创建一个新函数。当这个新函数被调用时，<code>bind()</code> 的第一个参数将作为它运行时的 <code>this</code>，之后的一序列参数将会在传递的实参前传入作为它的参数。(来自于 MDN )</p><p>首先我们看下 <code>bind</code> 都实现了哪些功能</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'fengzibo'</span><span class="token keyword">var</span> o <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>age<span class="token punctuation">,</span>sex<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> age <span class="token operator">+</span> sex<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> bindO <span class="token operator">=</span> foo<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token function">bindO</span><span class="token punctuation">(</span><span class="token string">'男'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//darkbo18男</span></code></pre><p>bind 可以分开传参，不像 apply 和 call 那样立即执行，而是返回一个改变 this 执行后的函数,</p><p>那么我们可以这么模拟 bind 的实现：</p><pre class=" language-javascript"><code class="language-javascript">Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>newBind <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> self <span class="token operator">=</span> <span class="token keyword">this</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>rest<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span><span class="token operator">...</span>args<span class="token punctuation">,</span><span class="token operator">...</span>rest<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>想要更深入理解bind的模拟实现，可以看看<a href="https://github.com/mqyqingfeng/Blog/issues/12" target="_blank" rel="noopener">JavaScript深入之bind的模拟实现</a></p><p>接下来，我们回过头看看 <code>new</code> 的模拟实现</p><h2 id="new"><a href="#new" class="headerlink" title="new"></a>new</h2><p><code>new</code> 是个关键字 模拟一个 <code>objectFactory(fn,...)</code>形式，能够访问到 <code>fn</code> 构造函数中的属性，还能访问到 <code>fn.prototype</code> 中的属性,还可以拥有返回值</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">objectFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 使用objectFactory的时候,把arguments,转化为数组</span>    <span class="token keyword">var</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提取第1个构建对象</span>    <span class="token keyword">var</span> Constructor <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建constructor实例 instance </span>    <span class="token keyword">var</span> instance <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Constructor<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// var instance = new Object() //不使用Object.create的方式</span>    <span class="token comment" spellcheck="true">// instance.__proto__ = Constructor.prototype</span>    <span class="token comment" spellcheck="true">// 使用apply函数运行args, 把 instance 绑定到 this</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> Constructor<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>instance<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//返回对象判断 是object 还是 null 还是实例</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> temp <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">&amp;&amp;</span> temp <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> temp <span class="token punctuation">:</span> instance<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h2 id="箭头函数-this-指向"><a href="#箭头函数-this-指向" class="headerlink" title="箭头函数 this 指向"></a>箭头函数 this 指向</h2><p>最后来说说箭头函数的指向<br>箭头函数没有自己的 <code>this</code>，前面我们说 <code>this</code> 的指向完全取决于函数在哪里被调用，这里要注意箭头函数的 <code>this</code> 不是调用的时候决定的，而是从自己的作用域链上一层继承 <code>this</code>。<br>举个栗子说明下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">21</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    getName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'fengzibo'</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'tony'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getAge<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">19</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">20</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'darkbo' this指向o</span>o<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 21 this指向window</span></code></pre><p><code>o.getName()</code> 的 <code>this</code> 指向是 <code>o</code> 对象，方法中的箭头函数 <code>fn</code> 就指向了 <code>o.getName()</code> 的 <code>this</code> 指向,而 <code>o.getAge()</code> 也是个箭头函数，那它就往上查找，由于 <code>o</code> 是个对象而非函数，所以 <code>this</code> 指向为 <code>window</code> 对象, 而其中的 <code>fn</code> 的 <code>this</code> 就取决于最外层的箭头函数。</p><p>最后还要注意一点，箭头函数中的 this 不会被 call 和 apply 改变</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> oCall <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'fengzibo'</span><span class="token punctuation">}</span><span class="token keyword">var</span> o <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'darkbo'</span><span class="token punctuation">,</span>    getName<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            <span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'tony'</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>oCall<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'darkbo' this还是指向o，并没有指向oCall</span></code></pre><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>作用域链及闭包</title>
      <link href="/2018/12/29/zuo-yong-yu-lian-ji-bi-bao/"/>
      <url>/2018/12/29/zuo-yong-yu-lian-ji-bi-bao/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在之前的<a href="http://www.darkbo.com/2018/12/28/zhi-xing-shang-xia-wen/">执行上下文</a>中，我们知道了每个函数都有一个执行上下文，对于每个执行上下文都有三个重要属性：</p><ul><li>作用域链</li><li>变量对象</li><li><code>this</code> 指向</li></ul><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>作用域链，是由当前环境与上层环境的一系列变量对象组成，它保证了当前执行环境对符合访问权限的变量和函数的有序访问。</p><p>让我们来结合一个例子，更好的理解作用域链到底是什么</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> global <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> one <span class="token operator">=</span> <span class="token number">1</span>    <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">function</span> <span class="token function">two</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> two <span class="token operator">=</span> <span class="token number">2</span>        <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">function</span> <span class="token function">three</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">var</span> three <span class="token operator">=</span> <span class="token number">3</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>global <span class="token operator">+</span> one <span class="token operator">+</span> two <span class="token operator">+</span>three<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">one</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//6</span></code></pre><p>很明显，在这例子中在全局环境中调用了 <code>one()</code> ,然后 <code>one</code> 又调用了 <code>two</code> ，<code>two</code> 有调用了 <code>three</code>，产生了4个执行上下文，那么自然就有4个变量对象，可以用伪代码来表述下：</p><pre class=" language-javascript"><code class="language-javascript">GlobalExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        global<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span>OneExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>One Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        one<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span>TwoExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Two Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>One Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        two<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span>ThreeExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Three Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Two Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>One Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        three<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>上面伪代码中的 <code>scopeChain</code> 就是作用域链 <code>[xxx Vo]</code> 指的是对应执行上下文执行阶段的变量对象，作用域链添加规则类似于 <code>scopeChain = [自身的VO].concat([父级的scopeChain])</code>，所以当代码执行到 <code>console.log</code> 的时候，首先通过查看作用域链并检查第一个变量对象来解析 <code>[Three Vo]</code>。它检查 <code>global</code> 是否存在于内部，<code>[Three Vo]</code> 但找不到具有该名称的任何属性，因此继续检查下一个 <code>[Vo]</code>。</p><p>这样按照顺序检查每个变量名是否存在，如果没找到就 抛出 <code>Uncaught ReferenceError</code> 的错误。因此，上面打印结果为6。</p><p>知道了作用域链是怎么回事，我们就可以解释这个例子了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>乍一看，以为是0，1，2，3，4,知道了作用域链我们就可以知道答案都是5。我们可以用伪代码实力分析一波<br>当执行<code>arr[0]()</code>的时候，<code>for</code> 循环已经结束，所以 <code>i</code> 是5</p><pre class=" language-javascript"><code class="language-javascript">GlobalExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        arr<span class="token punctuation">:</span> <span class="token punctuation">[</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">...</span>            <span class="token operator">...</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//有5个</span>        i<span class="token punctuation">:</span><span class="token number">5</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>ExecutionContext<span class="token operator">=</span><span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>arr[0]</code>的i是在<code>[Glbal Vo]</code>中找到的，所以结果是5，</p><p>那如何能让它达到预期，返回的是0，1，2，3，4呢？我们只需要在 <code>[Glbal Vo]</code> 中 <code>i</code> 的值变化之前调用函数就好了</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>或者利用闭包的形式</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    arr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>        <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">inner</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span>arr<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p>闭包的概念好难写，个人的是这么理解的</p><blockquote><p>一个函数 <code>A</code> 在其内部创建了一个函数 <code>B</code> 并返回，即使这个创建它的函数 <code>A</code> 的执行上下文已经销毁，函数 <code>B</code> 的引用仍然存在,并且函数 <code>B</code> 访问了函数 <code>A</code> 中变量对象的值，那么就产生了闭包</p></blockquote><p>我们就拿上面的例子，我们详细分析一波。</p><p>在循环中一个自执行函数 <code>inner</code> 调用，创建执行上下文，内部创建了一个匿名函数并返回 <code>push</code> 到数组中，并且匿名函数访问了 <code>inner</code> 的传参，<code>inner</code> 执行完毕销毁，匿名函数仍然存在数组中。还是拿伪代码更有助于理解</p><pre class=" language-javascript"><code class="language-javascript">globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>    variableObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>        i<span class="token punctuation">:</span> <span class="token punctuation">(</span>根据循环从<span class="token number">0</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span>        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//根据循环 innerContext 进出5次 </span>innerContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>inner Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    variableObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token number">0</span><span class="token punctuation">:</span> <span class="token punctuation">(</span>根据循环从<span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            length<span class="token punctuation">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        i<span class="token punctuation">:</span> <span class="token punctuation">(</span>根据循环从<span class="token number">0</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">)</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开始调用 <code>arr[0]()</code>，执行阶段</p><pre class=" language-javascript"><code class="language-javascript">globalContext <span class="token operator">=</span> <span class="token punctuation">{</span>    variableObject<span class="token punctuation">:</span> <span class="token punctuation">{</span>        i<span class="token punctuation">:</span> <span class="token number">5</span>        arr<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>        <span class="token operator">...</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>Context <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>inner<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> Vo<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>Glbal Vo<span class="token punctuation">]</span><span class="token punctuation">]</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>按照常理来讲，<code>inner</code> 执行完毕后销毁，但由于 <code>arr</code> 引用了 <code>inner</code>创建的匿名函数，就导致 <code>inner</code> 的 变量对象（<code>[inner[i] Vo]</code>）被保留了下来,<code>[arr[i] Vo]</code>中找不到的变量都在 <code>[inner[i] Vo]</code> 找到了，所以结果返回了0，1，2，3，4。</p><h2 id="使用闭包的注意点"><a href="#使用闭包的注意点" class="headerlink" title="使用闭包的注意点"></a>使用闭包的注意点</h2><ul><li>由于闭包会使得函数中的变量对象都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在IE中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</li><li>闭包会在父函数外部，改变父函数内部变量的值。所以，如果你把父函数当作对象（object）使用，把闭包当作它的公用方法（Public Method），把内部变量当作它的私有属性（private value），这时一定要小心，不要随便改变父函数内部变量的值。</li></ul><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>突然想到原型链，当我们尝试访问某个对象的属性，我们会先从作用域链中寻找，找不到再从原型中寻找，再找不到就返回 <code>undefind</code> 或报错</p><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>执行上下文</title>
      <link href="/2018/12/28/zhi-xing-shang-xia-wen/"/>
      <url>/2018/12/28/zhi-xing-shang-xia-wen/</url>
      
        <content type="html"><![CDATA[<h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'bbb'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ b(){</span>                <span class="token comment" spellcheck="true">//     return 'bbb'</span>                <span class="token comment" spellcheck="true">// }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ c(){</span>                <span class="token comment" spellcheck="true">//     return 'ccc'</span>                <span class="token comment" spellcheck="true">// }</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'cc'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'ccc'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ c(){</span>                <span class="token comment" spellcheck="true">//     return 'ccc'</span>                <span class="token comment" spellcheck="true">// }</span></code></pre><p>对此有疑问的小伙伴，别着急，咱们带着疑问去学习效果更佳，对此不屑的也没关系，可以思考下为什么会产生这样的结果，权当复习功课</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>首先我们先引入一个概念<strong>执行上下文（Execution Context）</strong></p><p>当执行到可执行代码的时候，就会进入一个执行上下文。可以简单理解成执行代码的“准备工作”</p><blockquote><p>可执行代码有三种：全局代码(首次执行代码的默认环境)、函数代码(每当执行流程进入函数体时)、eval代码(要在内部eval函数内执行的文本,不建议使用，可忽略)。</p></blockquote><p>因此在一个JavaScript程序中，必定会产生多个执行上下文</p><h2 id="执行上下文栈"><a href="#执行上下文栈" class="headerlink" title="执行上下文栈"></a>执行上下文栈</h2><p>如何管理创建的那么多执行上下文呢？所以 JavaScript 引擎创建了执行上下文栈（Execution context stack，ECS）来管理执行上下文</p><p>我们来看一个《JavaScript权威指南》的一个例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了模拟上下文，我们用 ECStack 来表示处理执行上下文组的堆栈，我们已经知道，当浏览器首次加载脚本的时候，最先遇到的是全局代码，所以首先是全局上下文入栈，我们用 Global Context 表示。</p><p>入栈之后，可执行代码开始执行，遇到了 <code>checkscope()</code>，然后调用 <code>checkscope</code> 这个函数，并创建一个该函数的上下文推送到 ECStack 的顶部。</p><p>在接着函数内部又调用了 <code>f</code> 这个函数，同样的创建一个 <code>f</code> 函数的上下文推送到现有 ECStack 的顶部。</p><p>执行 ECStack 顶部的上下文，一旦上下文执行完毕 它就会弹出堆栈并且控制返回到它下面的上下文，直到全局上下文 （Global Context） 为止。</p><p>要让 Global Context 也出栈 那就关闭浏览器吧</p><p>我觉得还是上张图更直接把</p><p><img src="/../images/ec.gif" alt=""></p><p>所以我们就可以得到5个要点：</p><ul><li>单线程</li><li>同步执行</li><li>1个全局上下文</li><li>无限函数上下文</li><li>每个函数调用都会生成一个对应的执行上下文</li></ul><p>学以致用，看看这段代码的执行上下文情况</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"global scope"</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> scope <span class="token operator">=</span> <span class="token string">"local scope"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> scope<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> f<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">checkscope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>同样给它来张图<br><img src="/../images/ec2.gif" alt=""></p><h2 id="详细执行上下文"><a href="#详细执行上下文" class="headerlink" title="详细执行上下文"></a>详细执行上下文</h2><p>上面说过每个函数调用都会生成一个对应的执行上下文</p><p>其实执行上下文分为两个阶段</p><p>1.创建阶段</p><ul><li>创建变量，函数和参数。</li><li>建立作用域链</li><li>确认 <code>this</code> 指向<br>2.激活/执行阶段：</li><li>分配值，引用函数和解释/执行代码</li></ul><p>我们可以用伪代码概念的表示一下执行上下文</p><pre class=" language-javascript"><code class="language-javascript">executionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 作用域链</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//函数参数/参数，内部变量和函数声明</span>    <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>开始分析下执行上下文的执行过程</p><p>1.创建执行上下文<br>2.还未执行代码，进入创建阶段：</p><ul><li>初始化作用域链。</li><li>创建 <code>variableObject</code> :<ul><li>创建arguments对象，检查参数的上下文，初始化名称和值并创建引用副本。</li><li>检查当前上下文的函数声明，也就是使用function关键字声明的函数，找到每个函数，创建一个以函数名命名的属性，该函数名称具有指向函数的引用指针，如果函数名已存在在 <code>variableObject</code> 中，则覆盖引用指针值。</li><li>扫描上下文以获取变量声明，找到每个变量声明，创建一个以变量名命名的属性，并初始化该值为 <code>undefined</code>。如果变量名已经存在在 <code>variableObject</code> 中，则不执行任何操作并继续扫描。</li></ul></li><li>确认 <code>this</code> 上下文中的值<br>3.激活/执行阶段：</li><li>在上下文中运行/解释功能代码，并在代码逐行执行时分配变量值。</li></ul><p>文字描述太累，代码说明：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">demo</span><span class="token punctuation">(</span>arg<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token function">demo</span><span class="token punctuation">(</span><span class="token number">233</span><span class="token punctuation">)</span></code></pre><p>为了便于理解，我们用伪代码来表示</p><pre class=" language-javascript"><code class="language-javascript">DemoExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 所有父执行上下文的变量对象</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">233</span><span class="token punctuation">,</span>            length<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        arg<span class="token punctuation">:</span><span class="token number">233</span><span class="token punctuation">,</span>        foo<span class="token punctuation">:</span> pointer to <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>        a<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>        b<span class="token punctuation">:</span>undefined    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//函数参数/参数，内部变量和函数声明</span>    <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结合上面的文字，我们一步步就生成了这个伪代码，先查找arguments，再查找函数，最后查找变量声明。</p><blockquote><p>注意：如果函数命名和变量名相同，在创建阶段会先创建以函数的命名属性，然后忽略同名变量。</p></blockquote><p>创建阶段已完成，进入代码执行阶段，执行完毕之后结果是这样的</p><pre class=" language-javascript"><code class="language-javascript">DemoExecutionContext <span class="token operator">=</span> <span class="token punctuation">{</span>    scopeChain<span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">// 所有父执行上下文的变量对象</span>    variableObject<span class="token punctuation">:</span><span class="token punctuation">{</span>        arguments<span class="token punctuation">:</span><span class="token punctuation">{</span>            <span class="token number">0</span><span class="token punctuation">:</span><span class="token number">233</span><span class="token punctuation">,</span>            length<span class="token punctuation">:</span><span class="token number">1</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        arg<span class="token punctuation">:</span><span class="token number">233</span><span class="token punctuation">,</span>        foo<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>        a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span>pointer to <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//函数参数/参数，内部变量和函数声明</span>    <span class="token keyword">this</span><span class="token punctuation">:</span><span class="token punctuation">{</span><span class="token operator">...</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>按照代码一行一行执行下来 往 <code>variableObject</code> 中赋值</p><blockquote><p>注意：与创建阶段不同，激活阶段中的foo是 <code>var foo = 10</code> 的结果，在执行了 <code>var foo = 10</code> 才改变了 <code>foo</code> 的值</p></blockquote><p>所以小伙伴在回过头看看本文开头的思考题，搬运一下</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//aaa</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'bbb'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ b(){</span>                <span class="token comment" spellcheck="true">//     return 'bbb'</span>                <span class="token comment" spellcheck="true">// }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ c(){</span>                <span class="token comment" spellcheck="true">//     return 'ccc'</span>                <span class="token comment" spellcheck="true">// }</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'cc'</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token string">'ccc'</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//ƒ c(){</span>                <span class="token comment" spellcheck="true">//     return 'ccc'</span>                <span class="token comment" spellcheck="true">// }</span></code></pre><p>为什么可以在声明前就访问到函数和变量了,为什么返回值是这些，不用我说了吧，自己去撸遍代码，加深印象。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>函数调用，创建执行上下文，进入执行上下文创建阶段，根据规则定义 <code>variableObject</code> （变量对象）属性，然后进入执行阶段，运行代码，重新给 <code>variableObject</code> （变量对象）属性赋值。</p><p>大家都看到执行上下文还有一个作用域链和 <code>this</code> 指向,<a href="http://www.darkbo.com/2018/12/29/zuo-yong-yu-lian-ji-bi-bao/">下篇文章</a>我们再慢慢探讨，了解这些能更好的帮助我们了解闭包</p><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>js继承方式</title>
      <link href="/2018/12/24/js-ji-cheng-fang-shi/"/>
      <url>/2018/12/24/js-ji-cheng-fang-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲讲JavaScript各种继承方式和优缺点。并加以验证</p><h2 id="1-原型链继承"><a href="#1-原型链继承" class="headerlink" title="1.原型链继承"></a>1.原型链继承</h2><p>将父类的实例作为子类的原型</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span><span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSurname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//吴</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//['house','car']</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//吴</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//['house','car']</span>son<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'王'</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//王</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//['house','newCar']</span>daughter<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//王</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//['house','newCar']</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>优点：</p><ul><li>非常纯粹的继承关系，实例是子类的实例，也是父类的实例</li><li>父类新增原型方法/原型属性，子类都能访问到</li></ul><p>缺点：</p><ul><li>来自原型对象的所有属性被所有实例共享</li><li>创建子类实例时，无法向父类构造函数传参</li></ul><h2 id="2-借用构造函数-经典继承"><a href="#2-借用构造函数-经典继承" class="headerlink" title="2.借用构造函数(经典继承)"></a>2.借用构造函数(经典继承)</h2><p>使用父类的构造函数来增强子类实例，等于是复制父类的实例属性给子类（没用到原型）</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childName <span class="token operator">=</span> name<span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSurname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span><span class="token keyword">var</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'sandy'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "car"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: son.getSurname is not a function</span></code></pre><p>优点：</p><ul><li>避免了共享属性</li><li>创建子类实例时，可以向父类传递参数</li></ul><p>缺点：</p><ul><li>实例并不是父类的实例，只是子类的实例</li><li>只能继承父类的实例属性和方法，不能继承原型属性/方法</li><li>无法实现函数复用，每个子类都有父类实例函数的副本，影响性能</li></ul><h2 id="3-组合继承"><a href="#3-组合继承" class="headerlink" title="3.组合继承"></a>3.组合继承</h2><p>组合 原型链继承 和 借用构造函数继承。通过调用父类构造，继承父类的属性并保留传参的优点，然后通过将父类实例作为子类原型，实现函数复用</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childName <span class="token operator">=</span> name<span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSurname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span>Children<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Children<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Children<span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span><span class="token keyword">var</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'sandy'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "car"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//吴</span>son<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18</span>daughter<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5</span></code></pre><p>优点：</p><ul><li>融合原型链继承和构造函数的优点，是 JavaScript 中最常用的继承模式</li></ul><p>缺点：</p><ul><li>调用了两次父类构造函数，多消耗了一点内存</li></ul><h2 id="4-原型式继承"><a href="#4-原型式继承" class="headerlink" title="4.原型式继承"></a>4.原型式继承</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">let</span> father <span class="token operator">=</span> <span class="token punctuation">{</span>    property <span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span><span class="token keyword">let</span> daughter <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>father<span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span></code></pre><p>同样共享了属性和方法</p><h2 id="5-寄生式继承"><a href="#5-寄生式继承" class="headerlink" title="5.寄生式继承"></a>5.寄生式继承</h2><p>创建一个仅用于封装继承过程的函数，该函数在内部以某种形式来做增强对象，最后返回对象</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> createObj <span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> clone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span>  clone<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> clone<span class="token punctuation">}</span></code></pre><p>缺点：跟借用构造函数模式一样，每次创建对象都会创建一遍方法。</p><h2 id="6-寄生组合继承"><a href="#6-寄生组合继承" class="headerlink" title="6.寄生组合继承"></a>6.寄生组合继承</h2><p>通过寄生方式，砍掉父类的实例属性，这样，在调用两次父类的构造的时候，就不会初始化两次实例方法/属性，避免的组合继承的缺点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childName <span class="token operator">=</span> name<span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSurname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token keyword">var</span> f <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>f<span class="token punctuation">.</span>prototype <span class="token operator">=</span> Father<span class="token punctuation">.</span>prototypeChildren<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// Children.prototype = new Father()</span>Children<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Children<span class="token punctuation">;</span><span class="token keyword">var</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span><span class="token keyword">var</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'sandy'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "car"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span>son<span class="token punctuation">.</span><span class="token function">getSurname</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//吴</span>son<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18</span>daughter<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//5</span></code></pre><p>封装一下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">create</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> o    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Prototype</span><span class="token punctuation">(</span>son<span class="token punctuation">,</span>father<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">let</span> prototype <span class="token operator">=</span> <span class="token function">create</span><span class="token punctuation">(</span>father<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span>    prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> son    son<span class="token punctuation">.</span>prototype <span class="token operator">=</span> prototype<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>childName <span class="token operator">=</span> name<span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getSurname <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>surname<span class="token punctuation">)</span><span class="token punctuation">}</span>Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Children</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>    Father<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">}</span><span class="token function">Prototype</span><span class="token punctuation">(</span>Children<span class="token punctuation">,</span>Father<span class="token punctuation">)</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'darkb'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span><span class="token keyword">let</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'sandy'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>daughter<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "newCar"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "car"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><blockquote><p>这种方式的高效率体现它只调用了一次 <code>Father</code> 构造函数，并且因此避免了在 <code>Father.prototype</code> 上面创建不必要的、多余的属性。与此同时，原型链还能保持不变；因此，还能够正常使用 <code>instanceof</code> 和 <code>isPrototypeOf</code>。开发人员普遍认为寄生组合式继承是引用类型最理想的继承范式。 ————————引用自《JavaScript 高级程序设计》</p></blockquote><h2 id="7-ES6-extends"><a href="#7-ES6-extends" class="headerlink" title="7.ES6 extends"></a>7.ES6 extends</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//父类</span><span class="token keyword">class</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>surname <span class="token operator">=</span> <span class="token string">'吴'</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>property <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'house'</span><span class="token punctuation">,</span><span class="token string">'car'</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span>    <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//子类</span><span class="token keyword">class</span> <span class="token class-name">Children</span> <span class="token keyword">extends</span> <span class="token class-name">Father</span><span class="token punctuation">{</span>    <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">let</span> son <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>son<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18</span>son<span class="token punctuation">.</span>property<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'newCar'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son<span class="token punctuation">.</span>property<span class="token punctuation">)</span><span class="token keyword">let</span> daughter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Children</span><span class="token punctuation">(</span><span class="token string">'sandy'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>daughter<span class="token punctuation">.</span>property<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//["house", "car"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Father</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>son <span class="token keyword">instanceof</span> <span class="token class-name">Children</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>优点：不用手动设置原型。</p><p>缺点：新语法，只要部分浏览器支持，需要转为 ES5 代码。<br>想进一步了解Class 的继承，传送门：<a href="http://es6.ruanyifeng.com/#docs/class-extends" target="_blank" rel="noopener">《ECMAScript 6 入门》</a><br>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>原型 Prototype</title>
      <link href="/2018/12/21/yuan-xing-prototype/"/>
      <url>/2018/12/21/yuan-xing-prototype/</url>
      
        <content type="html"><![CDATA[<p>直接进入主题吧，先盗用一张图，让你秒懂原型链</p><p><img src="/../images/prototype.jpeg" alt=""></p><p>就算懵逼也没关系，让我们接着往下看</p><h2 id="原型及原型链"><a href="#原型及原型链" class="headerlink" title="原型及原型链"></a>原型及原型链</h2><p>每一个JavaScript对象（null除外）在创建的时候就有与之关联另一个对象，这个对象就是我们所说的原型，每一个对象都会从原型”继承“属性。</p><p>原型链是一种机制，指的是 JavaScript 每个对象都有一个内置的 <code>__proto__</code> 属性指向创建它的构造函数的 <code>prototype</code>（原型）属性。原型链的作用是为了实现对象的继承，要理解原型链，需要先从对象、constructor、new、prototype、<code>__proto__</code> 这五个概念入手。</p><h3 id="函数对象与普通对象"><a href="#函数对象与普通对象" class="headerlink" title="函数对象与普通对象"></a>函数对象与普通对象</h3><p>JavaScript中，万物皆对象。但对象也是有区别的。分为普通对象和函数对象，Object 、Function 是 JS 自带的函数对象。下面举例说明</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> o2 <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> o3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token keyword">var</span> f2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> f3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">,</span><span class="token string">'console.log(str)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Function<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function  </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//function   </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> o1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//object </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> o2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//object </span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> o3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//object</span></code></pre><p>怎么区分，其实很简单，凡是使用 <code>function</code> 关键字或 <code>Function</code> 构造函数创建的对象都是函数对象。先记住一点，<strong>只有函数对象才拥有 <code>prototype</code> （原型）属性</strong>。</p><h3 id="constructor-构造函数"><a href="#constructor-构造函数" class="headerlink" title="constructor 构造函数"></a>constructor 构造函数</h3><p>每个实例对象都从原型中继承了一个constructor属性，该属性指向了用于构造此实例对象的构造函数。<br>构造函数也就是函数，作为函数的一种用法，像 <code>Object</code> 和 <code>Array</code> 这样的原生构造函数，在运行时会自动出现在执行环境中。我们也可以创建自定义构造函数，像这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'darkbo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> someOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">'someName'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// darkbo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// someName</span></code></pre><p>上述例子中，Person 就是我们创建的一个构造函数，创建了两个普通对象 <code>my</code> 和 <code>someOne</code>，这个普通对象包含一个属性。记住一点，<strong><code>my</code> 和 <code>someOne</code> 都是构造函数 <code>Person</code> 的实例</strong>，那么这个实例是如何创建的呢？</p><h3 id="new-操作符"><a href="#new-操作符" class="headerlink" title="new 操作符"></a>new 操作符</h3><p>要创建 <code>Person</code> 的新实例，必须使用 <code>new</code> 操作符。以这种方式调用构造函数实际上会经历以下4个步骤：</p><ul><li>创建一个新对象</li><li>将构造函数的作用域赋给新对象（因此 <code>this</code> 就指向了这个新对象）</li><li>执行构造函数中的代码（为这个新对象添加属性）</li><li>返回新对象</li></ul><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>上文记住的知识点：<strong>每个函数都有一个 <code>prototype</code>（原型） 属性</strong>。使用原型的好处是可以让所有对象实例共享它所包含的属性和方法。也就是说，我们没必要在构造函数中定义实例的信息，而是将这些信息添加到原型中，像这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"darkbo"</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> someOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// darkbo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// darkbo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name <span class="token operator">==</span> someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>sayName <span class="token operator">==</span> someOne<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>我们将属性和方法直接添加到 <code>Person</code> 的 <code>prototype</code> 属性中。与前面的例子不同的是，新对象的这些属性和方法是由所有实例共享的。同时我们再记住一个知识点：<strong>每个原型都有一个 <code>constructor</code> 属性指向关联的构造函数,这个属性包含一个指向 <code>prototype</code> 属性所在函数的指针</strong>。</p><p>虽然可以通过对象实例访问保存在原型中的值，但却不能通过对象实例重写原型中的值。再看一个例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"darkbo"</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> someOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>someOne<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// darkbo 来自原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa 来自实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name <span class="token operator">==</span> someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>sayName <span class="token operator">==</span> someOne<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Person <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>在这个例子中，我们可以看到 <code>someOne.name</code> 的值是 <code>aaa</code> 为什么会这样，是因为当访问 <code>name</code> 属性的时候，会先在实例上寻找，如果找到了就返回它的值并停止向原型寻找，而 <code>my</code> 这个实例没有 <code>name</code> 没有这个属性就会向原型寻找，找到并返回值，如果还没找到呢，先留个悬念，后文慢慢阐述。</p><p>但是这个写法相当繁琐，如果属性和方法很多呢，我们可以这样</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>  sayName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span></code></pre><p>这种写法确实舒服了些，视觉上也更好的封装原型的功能，但是之前介绍过，每创建一个函数，就会同时创建它的 <code>prototype</code> 对象，这个对象也会自动获得 <code>constructor</code> 属性。而我们在这里使用的语法，本质上完全重写了默认的 <code>prototype</code> 对象，因此 <code>constructor</code> 属性也就变成了新对象的 <code>constructor</code> 属性（指向 <code>Object</code> 构造函数），不再指向 <code>Person</code> 函数</p><p>如果 <code>constructor</code> 的值真的很重要，可以像下面这样特意将它设置回适当的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  constructor <span class="token punctuation">:</span> Person<span class="token punctuation">,</span>  name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>  sayName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span></code></pre><blockquote><p>注意,以这种方式重设 <code>constructor</code> 属性会导致它的 [[Enumerable]] 特性被设置为 <code>true</code>。默认情况下，原生的 <code>constructor</code> 属性是不可枚举的，所以可以试一试 <code>Object.defineProperty()</code>（es5）</p></blockquote><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span><span class="token string">'18'</span><span class="token punctuation">,</span>  sex<span class="token punctuation">:</span><span class="token string">'man'</span><span class="token punctuation">,</span>  sayName<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"constructor"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    enumerable<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    value<span class="token punctuation">:</span> Person<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// false</span></code></pre><p>说了这么多，那我们想下，为什么在构造函数的 prototype 中定义了属性和方法，它的实例中就能访问呢？</p><h3 id="proto"><a href="#proto" class="headerlink" title="proto"></a><strong>proto</strong></h3><p>那是因为当调用构造函数创建一个新实例后，该实例的内部将包含一个指针 <code>__proto__</code>，指向构造函数的原型。敲黑板做笔记啦 <strong>每一个JavaScript对象(除了 <code>null</code> )都具有的一个属性，叫<code>__proto__</code>，这个属性会指向该对象的原型。</strong><br>我们来证实一下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//true</span></code></pre><p>既然已经证实，那我们返回看下这段代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"darkbo"</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> someOne <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span>someOne<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'aaa'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// darkbo 来自原型</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// aaa 来自实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>name <span class="token operator">==</span> someOne<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>sayName <span class="token operator">==</span> someOne<span class="token punctuation">.</span>sayName<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Person<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true</span></code></pre><p>是不是能更严谨的解读这段代码了，从 <code>my</code> 对象中找不到 <code>name</code> 属性就会从 <code>my</code> 的原型也就是 <code>my.__proto__</code> ，也就是 <code>Person.prototype</code>中查找，顺便揭开我们的悬念，没找到的时候，原型的原型又是什么呢？</p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>万物皆对象，那么原型也是个对象，原型就是通过 Object 构造函数生成的，举个栗子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"darkbo"</span>Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayName <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>sayAge <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">var</span> my <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>my<span class="token punctuation">.</span><span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//darkbo</span>my<span class="token punctuation">.</span><span class="token function">sayAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//18</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>my<span class="token punctuation">.</span>sex<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// true</span>my<span class="token punctuation">.</span><span class="token function">saySex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Uncaught TypeError: my.saySex is not a function</span></code></pre><p>所以<code>Person.prototype.__proto__</code> 指向的是 <code>Object.prototype</code>， <code>Object.prototype.__proto__</code> 的值为 <code>null</code>,<code>Object.prototype</code>没有原型，查找属性的时候到 <code>Object.prototype</code> 就停止了，有值就返回值，没有就返回 <code>undefined</code> 或者报错，这也正是所有自定义类型都会继承 <code>toString()</code>、<code>valueOf()</code> 等默认方法的根本原因</p><p>至此，我们可以返回顶部查看一下那张刚开始看懵逼的图了，希望小伙伴们有所收获。</p><p>顺便说下，图中虚线形成的链，就是原型链</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>JavaScript 中描述了原型链的概念，并将原型链作为实现继承的主要方法。其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。<br>我们再回顾下构造函数、原型和实例的关系：</p><ul><li>每个构造函数都有一个原型（ <code>prototype</code> ）对象</li><li>原型对象都包含一个指向构造函数的指针（ <code>constructor</code> ）</li><li>实例都包含一个指向原型对象的内部指针（ <code>__proto__</code> ）</li><li>原型链查找到 <code>Object.prototype</code> 为止，并且 <code>Object.prototype</code> 没有原型</li></ul><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>深浅拷贝原理</title>
      <link href="/2018/12/18/shen-qian-kao-bei-yuan-li/"/>
      <url>/2018/12/18/shen-qian-kao-bei-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前调用栈堆提及了深浅拷贝，今天抽空聊聊深浅拷贝。<br>先回忆一下知识点</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3]</span></code></pre><p>然而结果并不是我们想要的，原因是我们只是复制了一次引用类型的地址而已，不管操作 <code>arr</code> 还是 <code>new_arr</code> ,本质都是操作同一个数组对象</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>话不多说，先上代码</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3]</span></code></pre><p>好像成功拷贝了，但是当数组嵌套了对象或者数组的时候，例如</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//或者slice</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3,{a:'bbb'}]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3,{a:'bbb'}]</span></code></pre><p>像 <code>arr[0]</code> 这个数组元素是基本类型，就会拷贝一份，互不影响，像 <code>arr[3]</code> 就是就是引用类型，就只会复制一次引用类型地址，修改任意一个，两者都会发生变化。<br>类似这种拷贝方法我们就称之为浅拷贝.</p><p>上面的例子适用于数组，同时实现浅拷贝的方法有很多，那就写些代码记录下，当个笔记</p><h3 id="for…in-适用于对象和数组"><a href="#for…in-适用于对象和数组" class="headerlink" title="for…in(适用于对象和数组)"></a>for…in(适用于对象和数组)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>      <span class="token keyword">let</span> newObj <span class="token operator">=</span> source <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> <span class="token function">shallowCopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3,{a:'bbb'}]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3,{a:'bbb'}]</span></code></pre><blockquote><p>给个小链接 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty" target="_blank" rel="noopener">hasOwnProperty</a></p></blockquote><h3 id="…操作符-适用于数组和对象"><a href="#…操作符-适用于数组和对象" class="headerlink" title="…操作符(适用于数组和对象)"></a>…操作符(适用于数组和对象)</h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">const</span> new_arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>arr<span class="token punctuation">]</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[4,2,3,{a:'bbb'}]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//[1,2,3,{a:'bbb'}]</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'darkbo'</span><span class="token punctuation">,</span>    age<span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span>    father<span class="token punctuation">:</span><span class="token punctuation">{</span>        age<span class="token punctuation">:</span><span class="token number">40</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj<span class="token punctuation">}</span>obj<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span>obj<span class="token punctuation">.</span>father<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">41</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     name:'darkbo',</span><span class="token comment" spellcheck="true">//     age:20,</span><span class="token comment" spellcheck="true">//     father:{</span><span class="token comment" spellcheck="true">//         age:41</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// {</span><span class="token comment" spellcheck="true">//     name:'darkbo',</span><span class="token comment" spellcheck="true">//     age:18,</span><span class="token comment" spellcheck="true">//     father:{</span><span class="token comment" spellcheck="true">//         age:41</span><span class="token comment" spellcheck="true">//     }</span><span class="token comment" spellcheck="true">// }</span></code></pre><p>方法还有很多，结合实际业务选择使用浅拷贝方式。那么怎样才能完全复制，且不相互影响呢，顾名思义，我们的深拷贝来了</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>首先来个简单的操作</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>b<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>简单粗暴，但是</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>        d<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    undefined<span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">var</span> new_arr <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span> JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>结果却是<br><img src="/../images/copy_1.png" alt=""><br>这是因为<code>JSON.stringify(..)</code> 在对象中遇到 <code>undefined</code> 、 <code>function</code> 和 <code>symbol</code> 时会自动将其忽略， 在 数组中则会返回 <code>null</code> （以保证单元位置不变）。</p><p>那么想要完全实现深拷贝，我们能想到的最常用的方法就是先创建一个空的新对象，然后递归遍历旧对象，直到发现基础类型的子节点才赋予到新对象对应的位置。在浅拷贝代码中稍微修改下</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> source <span class="token operator">!==</span> <span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span>    <span class="token punctuation">}</span>      <span class="token keyword">let</span> newObj <span class="token operator">=</span> source <span class="token keyword">instanceof</span> <span class="token class-name">Array</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            newObj<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">typeof</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'object'</span> <span class="token operator">?</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> newObj<span class="token punctuation">}</span><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>        a<span class="token punctuation">:</span><span class="token string">'aaa'</span><span class="token punctuation">,</span>        b<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>        c<span class="token punctuation">:</span>undefined<span class="token punctuation">,</span>        d<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    undefined<span class="token punctuation">,</span>    <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">let</span> new_arr <span class="token operator">=</span> <span class="token function">deepCopy</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">'bbb'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>new_arr<span class="token punctuation">)</span> </code></pre><p>打印结果<br><img src="/../images/copy_2.png" alt=""></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>因为深拷贝使用了递归，所以效率要低于浅拷贝，在大家平常业务中酌情使用</p><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>调用栈堆</title>
      <link href="/2018/12/13/diao-yong-zhan-dui/"/>
      <url>/2018/12/13/diao-yong-zhan-dui/</url>
      
        <content type="html"><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h4 id="栈-stack-和堆-heap"><a href="#栈-stack-和堆-heap" class="headerlink" title="栈 (stack) 和堆 (heap)"></a>栈 (stack) 和堆 (heap)</h4><p>一般来说，栈内存中存放的是存储对象的地址，而堆内存中存放的是存储对象的具体内容。</p><p>栈是有结构的，每个区块按照一定次序存放（后进先出），栈中主要存放一些基本类型的变量和对象的引用，存在栈中的数据大小与生存期必须是确定的。可以明确知道每个区块的大小，因此，栈的寻址速度要快于堆。</p><p>堆是没有结构的，数据可以任意存放。堆用于复杂数据类型（引用类型）分配空间，例如数组对象、object对象。<br>首先科普下基本类型和引用类型</p><blockquote><ul><li>基本类型：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）<br><span style="color:red;">关于Symbol（es6引入）特殊处理</span></li><li>引用类型：（object) =&gt; Array, function, data, RegExp<br>当我们需要访问引用类型（如对象，数组，函数等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</li></ul></blockquote><p>基本类型都是保存在栈当中，引用类型都是保存在堆当中</p><h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token string">'aaa'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//为a分配栈内存：a:'aaa'</span><span class="token keyword">let</span> copy_a <span class="token operator">=</span> a<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//基本类型直接访问值，为copy_a新分配栈内存：copy_a = 'aaa'</span>a <span class="token operator">=</span> <span class="token string">'bbb'</span> <span class="token comment" spellcheck="true">//栈内存中:a:'bbb'。a的值为'bbb',而copy_a的值仍然是"aaa"</span>copy_a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true">//栈内存中:copy_a:1。copy_a的值为1,而a的值仍然是"bbb"</span><span class="token comment" spellcheck="true">// let a = 'ccc' //报错</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'bbb'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">//为b分配栈内存访问地址:b,堆内存中存对象值：{b:'bbb'}</span><span class="token keyword">var</span> copy_b <span class="token operator">=</span> b <span class="token comment" spellcheck="true">// 为copy_b分配栈内存访问地址:copy_b,引用了堆内存的值{b:'bbb'}</span>copy_b<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">'b'</span> <span class="token comment" spellcheck="true">// 通过copy_b访问(修改)堆内存的变量,这时候堆内存中对象值为:{b:"b"},</span> <span class="token comment" spellcheck="true">//由于b和copy_b引用的是堆内存中同一个对象值，所以这时候打印都是{b:"b"}</span>copy_b <span class="token operator">=</span> <span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">'a'</span><span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 因为改的是整个对象，这里会在堆内存中创建一个新的对象值:{b:"a"},</span><span class="token comment" spellcheck="true">//而现在的copy_b引用的是这个对象，所以这里打印的b依旧是{b:"b"},</span><span class="token comment" spellcheck="true">//而copy_b是{b:"a"}(两者在内存中引用的是不同对象了)。</span></code></pre><p>由于 <code>const</code> 定义的基本类型不能改变，但是定义的对象是可以通过修改对象属性等方法来改变的。因此当我们定义一个 <code>const</code> 对象的时候，我们说的常量其实是指针，就是 <code>const</code> 对象对应的堆内存指向是不变的，但是堆内存中的数据本身的大小或者属性是可变的。而对于 <code>const</code> 定义的基础变量而言，这个值就相当于 <code>const</code> 对象的指针，是不可变的。</p><p>既然知道了 <code>const</code> 在内存中的存储，那么 <code>const</code> 、 <code>let</code> 定义的变量不能二次定义的流程也就比较容易猜出来了，每次使用 <code>const</code> 或者 <code>let</code> 去初始化一个变量的时候，会首先遍历当前的内存栈，看看有没有重名变量，有的话就返回错误。</p><h2 id="那么问题来了"><a href="#那么问题来了" class="headerlink" title="那么问题来了"></a>那么问题来了</h2><p>new大家都知道，根据构造函数生成新实例，这个时候生成的是对象，而不是基本类型。<br>再看一个例子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">var</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">'123'</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token punctuation">,</span> a<span class="token operator">===</span>b<span class="token punctuation">,</span> b<span class="token operator">==</span>c<span class="token punctuation">,</span> b<span class="token operator">===</span>c<span class="token punctuation">,</span> a<span class="token operator">==</span>c<span class="token punctuation">,</span> a<span class="token operator">===</span>c<span class="token punctuation">,</span> a<span class="token operator">==</span>d<span class="token punctuation">,</span> a<span class="token operator">===</span>d<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// true false true true true false false false</span></code></pre><p>很明显，如果 <code>a</code> ， <code>d</code> 是存储在栈内存中的话，两者应该是明显相等的，就像 <code>null === null</code> 是true一样，但结果两者并不相等，说明两者都是存储在堆内存中的，指针指向不一致。</p><p>说到这里，再去想一想我们常说的值类型和引用类型其实说的就是栈内存变量和堆内存变量，再想想值传递和引用传递、深拷贝和浅拷贝，都是围绕堆栈内存展开的，一个是处理值，一个是处理指针，本篇文章不做阐述。</p><h2 id="调用栈"><a href="#调用栈" class="headerlink" title="调用栈"></a>调用栈</h2><p>既然我们已经初步了解了栈 (stack) 和堆 (heap)，那么可以思考下我们写的代码是怎么运行的呢？</p><p>首先我们以一段简单代码为示例，来看一看到底什么是调用栈，它是一个怎么样的运行机制</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">a</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>开始分析代码</p><ol><li><code>console.log(b(2))</code> 执行，形成一个栈帧，调用 <code>b</code> 函数，再形成另一个栈帧。</li><li>新的栈帧压在上一个栈帧之上，继续执行代码， <code>b</code> 函数中又调用了 <code>a</code> 函数，形成了另一个栈帧压在旧栈帧之上，像叠罗汉一样，然后执行 <code>a</code>。</li><li>当执行完 <code>a</code>，返回 <code>4</code> 给 <code>b</code> 函数，<code>a</code>函数就被推出调用栈，<code>b</code> 函数继续执行，返回 <code>8</code> 给 <code>console.log</code> , <code>b</code> 函数被推出调用栈, <code>console.log</code> 输出结果，最后 <code>console.log</code> 也被推出调用栈,至此，该段程序执行结束。</li></ol><p>同步执行了解清楚，那异步函数呢，如 <code>setTimeout</code></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">a</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">*</span> num<span class="token punctuation">}</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//8</span><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//27</span></code></pre><p>首先我们要理解一下 <strong>Event Loop</strong>。<br>js引擎遇到一个异步事件后并不会一直等待其返回结果，而是会将这个事件挂起，继续执行执行栈中的其他任务。当一个异步事件返回结果后，js会将这个事件加入与当前执行栈不同的另一个队列，我们称之为事件队列。被放入事件队列不会立刻执行其回调，而是等待当前执行栈中的所有任务都执行完毕， 主线程处于闲置状态时，主线程会去查找事件队列是否有任务。如果有，那么主线程会从中取出排在第一位的事件，并把这个事件对应的回调放入执行栈中，然后执行其中的同步代码…，如此反复，这样就形成了一个无限的循环。这就是这个过程被称为“事件循环（Event Loop）”的原因。</p><ol><li>结合前面的分析当代码运行到第一个 <code>setTimeout</code> 的时候，<code>setTimeout</code> 是一个异步函数，将这个事件挂起，插入任务队列</li><li>继续执行 <code>console.log(b(2))</code>,打印 <code>8</code>，</li><li>再挂起一个 <code>setTimeout</code>，插入任务队列，主线程闲置</li></ol><p>到此我们要去查找队列中的任务了，是哪个先出。</p><p>“任务队列”是一个先进先出的数据结构，排在前面的事件，优先被主线程读取。主线程的读取过程基本上是自动的，只要执行栈一清空，”任务队列”上第一位的事件就自动进入主线程。但是，由于存在”定时器”功能，主线程首先要检查一下执行时间，某些事件只有到了规定的时间，才能返回主线程。</p><p>所以上述代码执行结果为8，27，1。</p><p>知道了这些我们就能很好的理解异步任务了</p><h2 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h2><p>异步任务之间并不相同，他们的执行优先级也有区别。不同的异步任务被分为两类：<br><strong>微任务（micro task）</strong></p><ol><li>new Promise() </li><li>new MutaionObserver()</li></ol><p><strong>宏任务（macro task）</strong></p><ol><li>setInterval()</li><li>setTimeout()</li></ol><p>再参考一个栗子</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span>reject<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//结果为:2 3 1</span></code></pre><p>前面我们说过，在一个事件循环中，异步事件返回结果后会被放到一个任务队列中。</p><p>然而，根据这个异步事件的类型，这个事件实际上会被分配到对应的宏任务队列或者微任务队列中去。并且在当前执行栈为空的时候，主线程会查看微任务队列是否有事件存在。如果不存在，那么再去宏任务队列中取出一个事件并把对应的回调加入当前执行栈；如果存在，则会依次执行队列中事件对应的回调，直到微任务队列为空，然后去宏任务队列中取出最前面的一个事件，把对应的回调加入当前执行栈…如此反复，进入循环。</p><p>我们只需记住当当前执行栈执行完毕时会立刻先处理所有微任务队列中的事件，然后再去宏任务队列中取出一个事件。同一次事件循环中，微任务永远在宏任务之前执行。</p><p>最后我们来讲讲垃圾回收</p><h2 id="垃圾回收"><a href="#垃圾回收" class="headerlink" title="垃圾回收"></a>垃圾回收</h2><p>JavaScript垃圾回收的机制很简单：找出不再使用的变量，然后释放掉其占用的内存，但是这个过程不是时时的，因为其开销比较大，所以垃圾回收器会按照固定的时间间隔周期性的执行。</p><p>首先理解下什么叫不再使用的变量？每个变量都有生命周期，全局变量的生命周期直至浏览器卸载页面才会结束。局部变量只在函数的执行过程中存在，而在这个过程中会为局部变量在栈或堆上分配相应的空间，以存储它们的值，然后再函数中使用这些变量，直至函数结束（闭包除外，同时在这不阐述闭包）。一旦函数结束，就释放局部变量占用的内存。</p><p>在这个大环境下其实我们不需要太过关注js的垃圾回收机制（个人观点），当然要注意平时培养良好的代码习惯，对这方面有执念的同学自行google，度娘。</p><p>如有错误，还忘指出，不甚感谢</p>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>不忘初心，写给远方的自己</title>
      <link href="/2018/12/10/bu-wang-chu-xin-xie-gei-yuan-fang-de-zi-ji/"/>
      <url>/2018/12/10/bu-wang-chu-xin-xie-gei-yuan-fang-de-zi-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>初雪刚下，银装素裹的杭州显得格外的美丽，似乎连冷冽的寒风都显得没那么刺骨了。早在14年的时候就想好好写点技术文章，结果到15年底才开始写些东西。虽然以前写的东西比较稚嫩、片面、基础，还有些辣眼睛，但那毕竟是自己的<a href="http://bobo.missql.com/" target="_blank" rel="noopener">知识累积</a>，还是要放出来见见人。</p><p>这个知识累积是搭建在朋友的服务器和域名下，后来因为他的一些操作，导致服务器被攻击云云⋯⋯，甚是蛋疼，后来修复好了之后总有bug，就没有继续写下去了（反正当时写的也不好）。就另起了一个博客，搭建在自己的服务器和域名下（自己的东西就是放心），就是现在这个博客了，基于了<a href="https://blinkfox.github.io/" target="_blank" rel="noopener">https://blinkfox.github.io/</a>,在此感谢。</p><h2 id="重新出发"><a href="#重新出发" class="headerlink" title="重新出发"></a>重新出发</h2><p>度过了浮躁的时期，慢慢的沉淀自己，有些后知后觉，开启新的篇章，回忆过去，取其精华，去其糟粕，回归初心。朋友都说，写博客这个好习惯怎么能够停止呢，快拿起你的烂笔头，这是核心竞争力呀⋯⋯巴拉巴拉。颇有道理，可是我该怎么开始写呢。</p><p>都说是沉淀了，是不是应该做些总结，可是现在各种博客、csdn、简书、掘金不都写的挺好的么，看看他们的文章，收藏收藏，实践实践不就行了么（停下写博客后基本都这样做，一部分原因是工作太忙，一部分原因是文笔不行，一部分原因是技术没有真正的沉淀下来，还有一部分原因是懒~），虽然站在巨人的肩膀上是件很舒服的事情，但是那毕竟还是别人的东西，可能这就是无法良好的阅读源码的原因了吧。</p><p>那么接下来就到立flag的时间了</p><h2 id="flag"><a href="#flag" class="headerlink" title="flag"></a>flag</h2><hr><p><a href="http://www.darkbo.com/2018/12/13/diao-yong-zhan-dui/">【进阶 1 期】 调用堆栈</a><br><a href="http://www.darkbo.com/2018/12/18/shen-qian-kao-bei-yuan-li/">【进阶 2 期】 深浅拷贝原理</a><br><a href="http://www.darkbo.com/2018/12/21/yuan-xing-prototype/">【进阶 3 期】 原型 Prototype</a><br><a href="http://www.darkbo.com/2018/12/24/js-ji-cheng-fang-shi/">【进阶 4 期】 js继承方式</a><br><a href="http://www.darkbo.com/2018/12/28/zhi-xing-shang-xia-wen/">【进阶 5 期】 执行上下文</a><br><a href="http://www.darkbo.com/2018/12/29/zuo-yong-yu-lian-ji-bi-bao/">【进阶 6 期】 作用域链及闭包</a><br><a href="http://www.darkbo.com/2019/01/03/jie-du-this-call-apply-bind/">【进阶 7 期】 解读 this 和 改变 this</a><br><a href="http://www.darkbo.com/2019/01/08/js-chuang-jian-dui-xiang/">【进阶 8 期】 js创建对象</a><br><a href="http://www.darkbo.com/2019/01/15/js-fang-dou-yu-jie-liu/">【进阶 9 期】 js防抖与节流</a><br><!-- 【进阶 2 期】 作用域闭包【进阶 3 期】 this 全面解析【进阶 4 期】 深浅拷贝原理【进阶 5 期】 原型 Prototype【进阶 6 期】 高阶函数【进阶 7 期】 事件机制【进阶 8 期】 Event Loop 原理【进阶 9 期】 Promise 原理【进阶 10 期】Async/Await 原理【进阶 11 期】防抖/节流原理【进阶 12 期】模块化详解【进阶 13 期】ES6 重难点【进阶 14 期】计算机网络概述【进阶 15 期】浏览器渲染原理【进阶 16 期】webpack 配置【进阶 17 期】webpack 原理【进阶 18 期】前端监控【进阶 19 期】跨域和安全【进阶 20 期】性能优化【进阶 21 期】VirtualDom 原理【进阶 22 期】Diff 算法【进阶 23 期】MVVM 双向绑定【进阶 24 期】Vuex 原理【进阶 25 期】Redux 原理【进阶 26 期】路由原理【进阶 27 期】VueRouter 源码解析【进阶 28 期】ReactRouter 源码解析 --></p>]]></content>
      
      
      <categories>
          
          <category> MarkDown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
